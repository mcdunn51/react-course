////////////////////////////////section 5 notes 

////////////////////
//a better project structure 
Components are THE core feature of react

The question is what should go into it's own component and what should go into root?

The render (i.e. within return) method shouldn't contain too much JSX. It should be lean.

each component should haave a clear purpose

added:
a persons component
a components folder
assets folder - for pictures etc
containers - holds all the containers such as app.js app.css
cockpit folder and cockpit.js file 

////////////////////////
//splitting an app into components


///////////////////////
//comparing stateless and stateful components
so components that extend the component class (remeber you can only use state here) VS components that are just functions.

stateful components:
class xy extends Components
can access state
can use lifecycle hooks
access state and props using "this" e.g. this.state.xy & this.props.xy
Use only if you need to manage State or access to lifecycle Hooks.
You can define methods

stateless:
access props via props - e.g props.xy

try to create function components as often as possible - this is because these have a narrow focus and a clear responsibility. 
If you were to try and manage state in every component, it would be hard to keep track of.

you can access props in the app component, you must preceed it with "this" (see appTitle in app.js - this recieves the a prop from index.js).

///////////////////////
//component lifecycle
is when react creates a component i.e. instantiates and renders a component it runs through multiple lifecycle phases and we can define methods in stateful components which react will execute which allows us to run some code during some of these lifecycle phases.

see http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/ for a lifecycle diagram.

The three react life cycle phases are:
Mounting 
Updating
Unmounting 
Error Handling

Each component has several “lifecycle methods” that you can override to run code at particular times in the process. In the list below, non-commonly used lifecycle methods are *'d. For a list of the parameters they take, see the react docs. Some of them e.g. shouldComponentUpdate() can stop the lifecycle for example if they return false. This can be good for efficiency.

Note:A "side effect" is anything that affects something outside the scope of the function being executed. 

                                                        Mounting
These methods are called in the following order when an instance of a component is being created and inserted into the DOM:

constructor()
*static getDerivedStateFromProps()
render()
Note: child components get rendered here.
componentDidMount()

                                                        Updating
An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:

*static getDerivedStateFromProps()
*shouldComponentUpdate()     
render()
Note: child components get rendered here.
*getSnapshotBeforeUpdate()
componentDidUpdate()

                                                       Unmounting
This method is called when a component is being removed from the DOM:
componentWillUnmount()

                                                     Error Handling
This method is called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.


*componentDidCatch()

//////////////////////////////
//converting stateless to stateful components
if you want to use a lifecycle method, it has to be in a statefull component. 
turned person and persons into stateful components by:

changing the function to class Persons extends Component
added a render function and put the JSX into it 
imported react {component}
exported Persons (capital P)
used "this" for props

did same for person component


/////////////////////////
//Component creation lifecycle in action
The lifecycle methods are referred to as hooks
render() is the only method that is mandatory for the stateful component.
They get called in the order stated above.


//////////////////////////////
//Performace Gains with Pure Components

React.PureComponent is similar to React.Component. The difference between them is that React.Component doesn’t implement shouldComponentUpdate(), but React.PureComponent implements it with a shallow prop and state comparison.

If your React component’s render() function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases. 

You should only use pure components if you know that updates may not be required - in other words if you have a component that you know the props may not change, this would be a good time to use pure component. There is no point making everything a pure component because if you put it somewhere where it will always succeed, for example in a child component and the check to see if props or state have changed has happened on it's parent component, then it is a waste of time and will impeed performance. 

Note: React.PureComponent’s shouldComponentUpdate() only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only extend PureComponent when you expect to have simple props and state.

////////////////////////////
//How react updates the app and component tree
Basically from the root (app.js) down.

///////////////////////////
//Understanding React's DOM Updating strategy
Say shoudComponentUpdate() is passed which means that render can be called what happens next is that react compares the old virtual DOM with the future DOM.
If there is differences then it updates the real DOM, but onlu in the places where differences were detected.
If there isn't (this can occur if shoudComponentUpdate() fails to catch somthing) then the real DOM isn't touched.
accessing the real DOM is very slow so this is why it's important to do it as little as possible.

////////////////////////////////
//Returning Adjacent elements

Maybe come back to this at some point.

///////////////////////////////
//Higher order components (HOCs)
Componets that wrap other components
can be usefull to add the same functionality to multiple child components

/////////////////////////////
//A different approach to HOCs
skipped L96 and 97

/////////////////////////////////
//using setState correctly
setState runs asynchronously 
we use it in an immutable way
sometimes you may have a state update that depends on the old state. Because it runs asynchronously, the new set state could have run before another one has finished.
To get round this you can call setState with prevState as a parameter.

////////////////////////////
//validating props












































