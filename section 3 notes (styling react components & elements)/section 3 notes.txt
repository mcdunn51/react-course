//////////////////////////////section 3 notes 
The problem using global styles is they are applied to everything, the problem with inline styles is you can't use many of the features of CSS.

/////////////////
//setting styles dynamically
dynamically change button style depending on wether we're showing persons or not.


//////////////////
//setting class names dynamically
if there is 2 or less persons showing make the "this is worki9ng paragraph" bold
if there is 1 or less persons showing make it red and bold

///////////////////
//radium
as standard you can't use psuedo classes and media queries for inline styles in react so you can install radium which allows you to do this.
npm install radium
you can use it on components but you must wrap the export in Radium.
export default Radium(App);
wrap psuedo selectors in ''


///////////////////////////
//using radium for media queries 
added a media query in persons component
wrapping the export in Radium (i.e. export default Radium(person);) is enough for psuedo selectors and other css, for transforming properties such as media queries or animations with key frames, you have to warp the entire application in a component called StyleRoot provided by radium.


///////////////////////////
//Enabling and using CSS Modules
Note: i didn't do this because I wanted to keep the radium examples.
for example scoping person.css to Person.js only 
In order to enable css modules you have to get rid of the radius stuff we used, and edit the build flow.
make sure to commit before running eject.
running the eject script does this.
running eject allows us to see and edit the build workflow. 
In the webpack.config.dev file scroll down to modules then where it says test: /\.css$/. Add modules:true and localIdentName: '[name]__[local]__[hash:base64:5]' in the options object.
Do the same in webpack.config.prod file.
then import Classes from './App.css';
this will import the classes in app.css as a JS object.
if you then want to apply a particular class to an element: <div className={classes.App}> (where App is one of the css classes in app.css)
once you've changed the build process you need to start it again. 




